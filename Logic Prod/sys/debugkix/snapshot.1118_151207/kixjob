: $Workfile:   kixjob.sh  $ $Revision:   1.3  $
#**********************************************************************#
#*                                                                    *#
#* Copyright (c) 2007 by Clerity Solutions, Inc.                      *#
#* All rights reserved.                                               *#
#*                                                                    *#
#**********************************************************************#

# usage: kixjob [file ...]
# formats file and sends it to BPE; removes file

# file(s) to move (optional); default stdin
FILE=
# formatter (default cat)
FORMATTER=cat
# set separator
case `uname -a|cut -f1 -d' '` in
	Windows_NT)
		SEP=';'
		;;
	*)
		SEP=':'
		;;
esac
# collect arguments
set -- `getopt p: $*`

# while	options	to process
while test "$1"	!= "--"
do
    case $1 in
    -p)
	PRINTID=$2
	shift
	;;
    *)
	echo "Invalid Parm $2"
	exit 1
	# illegal option encountered
	;;
    esac
    shift
done

# skip --
shift

# all arguments	are files to go to batch
FILE="$*"

########################################################################
#Comment out the old standard batch version of the script
## if no file given, assume stdin
#if test -z "$FILE"
#then
#    FILE="-"
#    RMCMD=
#else
#    # must remove file after printing
#    RMCMD="/bin/rm -f	$FILE"
#fi

#if test -z "$KIXBTCH"
#then
#    echo "KIXBTCH is not set.  Job $FILE left in KIXSYS" >&2
#    exit 0
#fi

## The shell will not be executed unless its mode is executable 

#chmod 755 $FILE

## If KIXBTCH has multiple directories, strip off all but the first
## If KIXBTCH contains a time, strip it off also

##BTCHDIR=`echo "$KIXBTCH" | cut -f1 -d":" | cut -f1 -d"["` 
#BTCHDIR=`env | grep KIXBTCH | cut -f2 -d"=" | cut -f1 -d"$SEP"` 

## Move the file to the batch directory for execution

#mv $FILE $BTCHDIR
#exit $?
########################################################################

# Normally the FILE name is BTCH####.job
# Remove the '.job for jobname

jobname=`basename $FILE | sed s/\\\..*//`

# If first line is started with '//'
# Then it is BPE JCL file

bpejcl=0
firstline=`head -1 $FILE | grep '^//'`
if [ $? -eq 0 ]
then
	bpejcl=1
fi

# Stand batch script processing:
# Add JCL_SUFFIX to the jobname if it is defined
# move it to $JCLDIR
# Run bpesub to submit the job

if [ $bpejcl -eq 0 ]
then
	if test -z "$JCL_SUFFIX"
	then
        	batchfile=$jobname
	else
        	batchfile=${jobname}${JCL_SUFFIX}
	fi
	mv $FILE $JCLDIR/$batchfile

        # By default, the job is submitted on BPE class 'b'
	# It should be changed to the BPE class defined in bam that has one activity configured.
	
	cd $JCLDIR
	bpesub $jobname -i -c b > /dev/null

	if [ $? -ne 0 ]
	then
	   kixlog "kixjob: Batch job error - unikixjob failed for $jobname"
	   exit 1
	fi

	kixlog "Batch job $jobname is submitted"

        exit 0
fi

#
# The following codes are for BPE JCL file.
#
# By default the following file structures are created:
# $KIXSYS/UniKix_runtime/jmvs - for the original JCL file
# $KIXSYS/UniKix_runtime/ish  - for the translated JCL file
# $KIXSYS/UniKix_runtime/jvms_err - for the tranaslation failed JCL file
#
# The first step: Check if the above directory exists, if not then create them.
# The second step: Process the BPE JCL file.
#
# BPE JCL porcessing:
# Check if the same jmvs jcl already exists in the $KIXSYS/UniKix_runtime/jmvs directory
# If it does and an ish file also exists, we will simply submit the job
#
# If the file exists, but is different, or the file does not already exist, then we will
# execute the mvstrans utility to translate the job. If the translate fails, we will exit
# with an error. If the translate works, we will submit the job.
#
# If the submit of the job is successful, then the utility will exit with a good status.
# We will not wait for the submitted job to complete.
#
# If the submit of the job fails, then the utility will exit with an error status.
#

# Check $KIXSYS/UniKix_runtime/jmvs directory

if test ! -d $KIXSYS/UniKix_runtime/jmvs
then
        mkdir -p $KIXSYS/UniKix_runtime/jmvs
fi

# Check $KIXSYS/UniKix_runtime/ish directory

if test ! -d $KIXSYS/UniKix_runtime/ish
then
        mkdir -p $KIXSYS/UniKix_runtime/ish
fi

# Check $KIXSYS/UniKix_runtime/jmvs_err directory

if test ! -d $KIXSYS/UniKix_runtime/jmvs_err
then
        mkdir -p $KIXSYS/UniKix_runtime/jmvs_err
fi

# Process BPE JCL file
if [ ! -f "$FILE" ]
then
   kixlog "kixjob: Batch job error - $FILE does not exist "
   exit 1
fi

mv $FILE $KIXSYS/UniKix_runtime/jmvs/$jobname
if [ $? -ne 0 ]
then
   kixlog "kixjob: Batch job error - Unable to copy $FILE to $KIXSYS/UniKix_runtime/jmvs"
   exit 1
fi

cd $KIXSYS/UniKix_runtime
mvstrans $jobname -v > /dev/null
if [ $? -ne 0 ]
then
   currentdate=`date +%Y%m%d-%H%M%S`
   mv $KIXSYS/UniKix_runtime/jmvs/$jobname $KIXSYS/UniKix_runtime/jmvs_err/${jobname}_${currentdate}
   kixlog "kixjob: Batch job error - mvstrans -v failed for $jobname"
   kixlog "kixjob: Batch job error - The JCL file has been moved to $KIXSYS/UniKix_runtime/jmvs_err/${jobname}_${currentdate}"
   exit 1
fi

mvstrans $jobname -f> /dev/null
if [ $? -ne 0 ]
then
   currentdate=`date +%Y%m%d-%H%M%S`
   mv $KIXSYS/UniKix_runtime/jmvs/$jobname $KIXSYS/UniKix_runtime/jmvs_err/${jobname}_${currentdate}
   kixlog "kixjob: Batch job error - mvstrans -f failed for $jobname"
   kixlog "kixjob: Batch job error - The JCL file has been moved to $KIXSYS/UniKix_runtime/jmvs_err/${jobname}_${currentdate}"
   exit 1
fi

# By default, the job is submitted on BPE class 'b'
# It should be changed to the BPE class defined in bam that has one activity configured.

unikixjob $jobname -c b -k$EBMSYS -W$KIXSYS/UniKix_runtime/ish > /dev/null

if [ $? -ne 0 ]
then
   kixlog "kixjob: Batch job error - unikixjob failed for $jobname"
   exit 1
fi
kixlog "Batch job $jobname is submitted"

rm $KIXSYS/UniKix_runtime/jmvs/$jobname

exit 0

