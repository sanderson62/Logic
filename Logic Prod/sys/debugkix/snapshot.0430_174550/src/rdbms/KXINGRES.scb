      *****************************************************************
      *                                                               *
      * Copyright (c) 2007 by Clerity Solutions, Inc.                 *
      * All rights reserved.                                          *
      *                                                               *
      *****************************************************************
       ID  DIVISION.
       PROGRAM-ID. KXINGLGN.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
      *---------------------------------------------------------------*
      *  Code the userid and password, or use sit info to collect the
      *  application name and connect using application name.
      *---------------------------------------------------------------*
	   EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  USERID                         PIC X(8).
       01  PASSWRD                        PIC X(8).
       01  USERNAME                       PIC X(8).
       01  SQL-STRING                     PIC X(40).
	   EXEC SQL END DECLARE SECTION END-EXEC.
           EXEC SQL INCLUDE SQLCA END-EXEC.

       01  SQLCODE-DISP                   PIC -9(5).
      *---------------------------------------------------------------*
      * This copy book gives the tct and system information 
      *---------------------------------------------------------------*
       COPY "KXINFO.CPY".
      *---------------------------------------------------------------*
      * Sample COBOL program which contains entry points for
      * interfacing UniKix's user exits with Ingres software. The main
      * entry point(KXINGLGN) is for logging onto the Ingres server and
      * is called by the UniKix transaction processors
      * and batch vsam processor when they are
      * initiated by the UniKix system. Entry point KXINGLGF is for
      * logging off from the Ingres server and is called by the UniKix 
      * transaction processors and batch vsam processors when they terminate.
      *
      * Entry point KXINGSAVE is for executing an SQL COMMIT statement and
      * will be called at UniKix sync point time. If the user COBOL programs
      * are already doing COMMITs, then this statement will have no effect.
      * Entry point KXINGUNDO is for executing an SQL ROLLBACK statement and
      * will be called at UniKix rollback time. If the user COBOL programs
      * are already doing ROLLBACKs, then this statement will have no effect.
      *
      *---------------------------------------------------------------*
       PROCEDURE DIVISION.
	   MOVE "KXINGLGN" TO KIX-MSG-ROUTINE.
	   EXEC SQL WHENEVER SQLERROR GOTO SQL-ABORT END-EXEC.
      *---------------------------------------------------------------*
      * This call update the  sit information
      * user can use this information to set the userid . 
      * In this example, application name is used as the userid and
      * password.
      *---------------------------------------------------------------*
       	   CALL "kxsysinfo" using KIX-SYS-INFO.
       	   MOVE KIX-SIT-USR-NAME TO USERID.
	   MOVE KIX-SIT-USR-PASS TO PASSWRD.
           EXEC SQL CONNECT       :USERID  END-EXEC.
	   SET RETURN-CODE TO 0.
           EXIT PROGRAM.
       ENTRY "KXINGLGF".
	   MOVE "KXINGLGF" TO KIX-MSG-ROUTINE.
	   EXEC SQL WHENEVER SQLERROR GOTO SQL-ERROR END-EXEC.
           EXEC SQL DISCONNECT END-EXEC.
	   SET RETURN-CODE TO 0.
           EXIT PROGRAM.
       ENTRY "KXINGBTRN".
	   MOVE "KXINGBTRN" TO KIX-MSG-ROUTINE.
	   EXEC SQL WHENEVER SQLERROR GOTO SQL-ABORT END-EXEC.
      *---------------------------------------------------------------*
      * This call updates the tct information
      *---------------------------------------------------------------*
       	   CALL "kxtctinfo" using KIX-TCT-INFO.
      *---------------------------------------------------------------*
      *    Ingres specific security features.  Uncomment the code
      *    to implement the feature.
      *---------------------------------------------------------------*
      *    MOVE KIX-USRNAM TO USERNAME.
      *    STRING "SET ROLE " USERNAME DELIMITED BY SIZE
      *            INTO SQL-STRING.
      *	   EXEC SQL EXECUTE IMMEDIATE :SQL-STRING END-EXEC.
           EXEC SQL SAVEPOINT ingres_savepoint END-EXEC.
	   SET RETURN-CODE TO 0.
           EXIT PROGRAM.
       ENTRY "KXINGETRN".
	   MOVE "KXINGETRN" TO KIX-MSG-ROUTINE.
	   EXEC SQL WHENEVER SQLERROR GOTO SQL-ERROR END-EXEC.
           EXEC SQL COMMIT WORK END-EXEC.
	   SET RETURN-CODE TO 0.
           EXIT PROGRAM.
       ENTRY "KXINGSAVE".
	   MOVE "KXINGSAVE" TO KIX-MSG-ROUTINE.
	   EXEC SQL WHENEVER SQLERROR GOTO SQL-ERROR END-EXEC.
           EXEC SQL COMMIT WORK END-EXEC.
           EXEC SQL SAVEPOINT ingres_savepoint END-EXEC.
	   SET RETURN-CODE TO 0.
           EXIT PROGRAM.
       ENTRY "KXINGUNDO".
	   MOVE "KXINGUNDO" TO KIX-MSG-ROUTINE.
	   EXEC SQL WHENEVER SQLERROR GOTO SQL-ERROR END-EXEC.
           EXEC SQL ROLLBACK WORK END-EXEC.
	   SET RETURN-CODE TO 0.
           EXIT PROGRAM.
       SQL-ABORT.
      *---------------------------------------------------------------*
      *    Set return-code to Failure (1) or Abort (-1)
      *    Failure during allocation brings up the SERVER, without
      *           the database connected.
      *    Abort always aborts the  transaction SERVER
      *    This example aborts the transaction SERVER
      *---------------------------------------------------------------*
	   MOVE SQLCODE TO SQLCODE-DISP.
	   STRING "DATABASE ERROR. SQLCODE = ", SQLCODE-DISP
		  DELIMITED BY SIZE INTO KIX-MSG-STR.
           CALL "kxsetmsg" USING KIX-MSG-INFO.
	   SET RETURN-CODE TO -1.
           EXIT PROGRAM.
       SQL-ERROR.
      *---------------------------------------------------------------*
      *    Set return-code to Failure (1) or Abort (-1)
      *    Failure during other exits terminates the transaction
      *    Abort always aborts the  transaction SERVER
      *    This example terminates transaction.
      *---------------------------------------------------------------*
	   MOVE SQLCODE TO SQLCODE-DISP.
	   STRING "DATABASE ERROR. SQLCODE = ", SQLCODE-DISP
		  DELIMITED BY SIZE INTO KIX-MSG-STR.
           CALL "kxsetmsg" USING KIX-MSG-INFO.
	   SET RETURN-CODE TO 1.
           EXIT PROGRAM.
